// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                 String    @id @default(cuid())
  userId             String
  providerType       String
  providerId         String
  providerAccountId  String
  refreshToken       String?
  accessToken        String?
  accessTokenExpires DateTime?
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  user               User      @relation(fields: [userId], references: [id])

  @@unique([providerId, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  userId       String
  expires      DateTime
  sessionToken String   @unique
  accessToken  String   @unique
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id])
}

enum UserType {
  User
  Admin
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  accounts      Account[]
  sessions      Session[]
  hashedPassword String?
 
  userType  UserType  @default(User)

  favoriteIds String[]
  products Product[]

  conversation Conversation[]
  sentMessages Message[] @relation("sender")
  receiverMessages Message[] @relation("receiver")
}

model VerificationRequest {
  id         String   @id @default(cuid())
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([identifier, token])
}

model Product {
  id  String @id @default(cuid())
  title String
  description String
  imageSrc String
  category String
  userId String
  price Int
  latitude Float
  longitude Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

}

model Conversation {
  id String @id @default(cuid())
  name String?
  senderId String
  receiverId String
  users User[]
  messages Message[]
  createdAt DateTime @default(now())
}

model Message {
  id String @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  text String?
  image String?
  sender User @relation(name: "sender", fields: [senderId], references: [id])
  senderId String
  receiver User @relation(name: "receiver", fields: [receiverId], references: [id])
  receiverId String
  conversation Conversation @relation(fields: [conversationId], references: [id])
  conversationId String
}
